import requests
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
import streamlit as st

st.title("üå§Ô∏è Weather Pattern Prediction Dashboard")
st.write(
    "‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Open-Meteo API "
    "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï"
)
cities = {
    'Bangkok': (13.75, 100.52),
    'Chiang Mai': (18.79, 98.98),
    'Phuket': (7.88, 98.39)
}
city = st.selectbox('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡∏≠‡∏á', list(cities.keys()))
lat, lon = cities[city]

st.write(f"üìç ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {city} (‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î: {lat}, ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î: {lon})")
st.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (2024-01-01 ‡∏ñ‡∏∂‡∏á 2024-03-31)")
start_date = "2024-01-01"
end_date = "2024-03-31"


url = (
    f"https://archive-api.open-meteo.com/v1/archive?"
    f"latitude={lat}&longitude={lon}"
    f"&start_date={start_date}&end_date={end_date}"
    f"&hourly=temperature_2m"
)
try:
    data = requests.get(url).json()
    df = pd.DataFrame({
        'time': data['hourly']['time'],
        'temperature': data['hourly']['temperature_2m']
    })
except Exception as e:
    st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API")
    st.stop()

df['time'] = pd.to_datetime(df['time'])
df['temperature'] = pd.to_numeric(df['temperature'])

# 4. Data Preprocessing
df['temp_rolling3'] = df['temperature'].rolling(window=3).mean()
df['target'] = df['temperature'].shift(-1)  # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
df = df.dropna()

# 5. Split Data
st.write("### ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•")
st.dataframe(df[['time', 'temperature', 'temp_rolling3', 'target']].head(10))
st.write("### ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•")
st.dataframe(df[['time', 'temperature', 'temp_rolling3', 'target']].tail(10))
X = df[['temperature', 'temp_rolling3']]
y = df['target']
X_train, X_test, y_train, y_test = train_test_split(
    X, y, shuffle=False, test_size=0.2
)

# 6. Train Model
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# 7. Evaluate Model
st.write("### ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•")
st.write("#### ‡∏Ñ‡πà‡∏≤‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (Test Set)")
st.dataframe(pd.DataFrame({
    'Actual': y_test,
    'Predicted': y_pred
}).reset_index(drop=True))
st.write("#### ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥")
st.write("Mean Absolute Error (MAE) ‡∏Ñ‡∏∑‡∏≠ ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á")
mae = mean_absolute_error(y_test, y_pred)
st.metric(label="Mean Absolute Error (MAE)", value=f"{mae:.2f} ¬∞C")

# 8. Visualize Predictions
st.write("### ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏ä‡πà‡∏ß‡∏á Train Set)")
df_pred = df.iloc[-len(y_test):].copy()
df_pred['prediction'] = y_pred
df_pred = df_pred.set_index('time')

st.write("### ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏ä‡πà‡∏ß‡∏á Test Set)")
st.line_chart(df_pred[['temperature', 'prediction']])

# 9. Future Predictions
with st.expander("‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"):
    st.dataframe(df_pred[['temperature', 'prediction']].head(24))
